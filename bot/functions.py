from keyboards import get_spin_keyboard, back_keyboard, conclusion_keyboard, profile_keyboard, replenishment_keyboard
from dice_check import get_combo_data
from key_generator.key_generator import generate
import requests
import time
from textwrap import dedent
import config
from telebot.types import ReplyKeyboardRemove

def profile(message, bot, c, conn):
	r = c.execute(f"SELECT * FROM users WHERE id='{message.chat.id}'").fetchone()
	bot.send_message(message.chat.id, f'–õ–æ–≥–∏–Ω –∫–æ—à–µ–ª—å–∫–∞: {r[2]}\n–ë–∞–ª–∞–Ω—Å: {r[1]} –ø—Ä–æ–∫—Ä—É—Ç–æ–≤', reply_markup=profile_keyboard())

def change(message, bot, c, conn):
	m = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∫–æ—à–µ–ª—å–∫–∞', reply_markup=back_keyboard())

def complete_change(message, bot, c, conn):
	if message.text == '–í –º–µ–Ω—é':
		bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
	else:
		c.execute(f"UPDATE users SET login='{message.text}' WHERE id='{message.chat.id}'")
		conn.commit()
		bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã', reply_markup=get_spin_keyboard())

def replenishment(message, bot, c, conn):
	r = c.execute(f"SELECT login FROM users WHERE id='{message.chat.id}'").fetchone()
	if r[0] == '':
		bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ª–æ–≥–∏–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
	elif message.text == '–í –º–µ–Ω—é':
		bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
	else:
		key = generate()
		GK = key.get_key()
		c.execute(f"UPDATE users SET gk='{str(GK)}' WHERE id='{message.chat.id}'")
		conn.commit()

		bot.send_message(message.chat.id, f'‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n–í–≤–æ–¥–∏—Ç–µ —Å—É–º–º—É, –∫—Ä–∞—Ç–Ω—É—é —Ü–µ–Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∞ (1 –ø—Ä–æ–∫—Ä—É—Ç = {config.sale} DUCO)\n\n–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –ª–æ–≥–∏–Ω: {config.admin}\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {GK}\n\n–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', reply_markup=replenishment_keyboard())

def check_replenishment(call, bot, c, conn):
	time.sleep(3)
	user = c.execute(f"SELECT * FROM users WHERE id='{call.message.chat.id}'").fetchone()
	r = requests.get('https://server.duinocoin.com/user_transactions/'+user[2])
	response = r.json()
	for dicts in response['result']:
		if dicts['memo'] == user[3] and dicts['recipient'] == config.admin:
			bot.edit_message_text(f'‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n–í–≤–æ–¥–∏—Ç–µ —Å—É–º–º—É, –∫—Ä–∞—Ç–Ω—É—é —Ü–µ–Ω–µ –ø—Ä–æ–∫—Ä—É—Ç–∞ (1 –ø—Ä–æ–∫—Ä—É—Ç = {config.sale} DUCO)\n\n–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –ª–æ–≥–∏–Ω: {config.admin}\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –≤ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: {user[3]}\n\n–°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', call.message.chat.id, call.message.message_id, reply_markup='')
			c.execute(f"UPDATE users SET gk='', balance={user[1]+int(dicts['amount']/config.sale)} WHERE id='{call.message.chat.id}'")
			conn.commit()
			bot.send_message(call.message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
			break

def conclusion(message, bot, c, conn):
	r = c.execute(f"SELECT login FROM users WHERE id='{message.chat.id}'").fetchone()
	if r[0] == '':
		bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤–≤–µ–ª–∏ –ª–æ–≥–∏–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
	elif message.text == '–í –º–µ–Ω—é':
		bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
	else:
		bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ (1 –ø—Ä–æ–∫—Ä—É—Ç = {config.sale} DUCO)', reply_markup=ReplyKeyboardRemove())

def get_conclusion(message, bot, c, conn):
	try:
		time.sleep(3)
		key = generate()
		GK = key.get_key()
		c.execute(f"UPDATE users SET sk='{str(GK)}' WHERE id='{message.chat.id}'")
		conn.commit()
		summ = abs(float(message.text))
		r = c.execute(f"SELECT balance FROM users WHERE id='{message.chat.id}'").fetchone()
		if r[0] < summ:
			bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
		else:
			user = c.execute(f"SELECT * FROM users WHERE id='{message.chat.id}'").fetchone()
			r = requests.get(f'https://server.duinocoin.com/transaction?username={config.admin}&password={config.password}&recipient={user[2]}&amount={summ*config.sale}&memo={GK}')
			response = r.json()
			bot.send_message(message.chat.id, f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å—Ä–µ–¥—Å—Ç–≤\n\n–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', reply_markup=conclusion_keyboard())
	except ValueError:
		bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é —Å—É–º–º—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=get_spin_keyboard(), parse_mode='Markdown')

def check_conclusion(call, bot, c, conn):
	user = c.execute(f"SELECT * FROM users WHERE id='{call.message.chat.id}'").fetchone()
	r = requests.get('https://server.duinocoin.com/user_transactions/'+config.admin)
	response = r.json()
	time.sleep(3)
	for dicts in response['result']:
		if dicts['memo'] == user[4] and dicts['recipient'] == user[2]:
			bot.edit_message_text(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —Å—Ä–µ–¥—Å—Ç–≤\n\n–°—Ç–∞—Ç—É—Å: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω', call.message.chat.id, call.message.message_id, reply_markup='')
			c.execute(f"UPDATE users SET sk='', balance={user[1]-int(dicts['amount']/config.sale)} WHERE id='{call.message.chat.id}'")
			conn.commit()
			bot.send_message(call.message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é', reply_markup=get_spin_keyboard(), parse_mode='Markdown')
			break

def cmd_spin(message, score, bot, c, conn):
	if score == 0:
		bot.send_sticker(message.chat.id, config.STICKER_FAIL)
		bot.send_message(message.chat.id, "–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í—ã –º–æ–∂–µ—Ç–µ —Å–º–∏—Ä–∏—Ç—å—Å—è —Å —Å—É–¥—å–±–æ–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∂–∏—Ç—å —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, –∞ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë –∑–∞–Ω–æ–≤–æ. –ò–ª–∏ /stop, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."
		)
		return
	
	answer_text_template = """üé∞–í–∞—à–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo_text} (‚Ññ{dice_value}).{win_or_lose_text} –í–∞—à —Å—á—ë—Ç: {new_score}."""

	msg = bot.send_dice(message.chat.id, emoji="üé∞", reply_markup=get_spin_keyboard())

	score_change, combo_text = get_combo_data(msg.dice.value)
	if score_change < 0:
		win_or_lose_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."
	else:
		win_or_lose_text = f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {score_change} –æ—á–∫–æ–≤!"

	new_score = score + score_change

	c.execute(f"UPDATE users SET balance={new_score} WHERE id='{message.chat.id}'")
	conn.commit()
	time.sleep(2)
	bot.send_message(message.chat.id, 
		dedent(answer_text_template).format(
			combo_text=combo_text,
			dice_value=msg.dice.value,
			win_or_lose_text=win_or_lose_text,
			new_score=new_score
		), reply_markup=get_spin_keyboard())